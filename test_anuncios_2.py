# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAnuncios():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()

  def test_anuncios(self):
    # Test name: anuncios
    # Step # | name | target | value
    # 1 | open | https://www.keepworking.online/ | 
    self.driver.get("https://www.keepworking.online/")
    # 2 | setWindowSize | 1376x744 | 
    # self.driver.set_window_size(1376, 744)
    self.driver.maximize_window()

    wait = WebDriverWait(self.driver, 10, 2)
    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".cookies")))
    # 3 | mouseOver | css=.btn__close > svg | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".btn__close > svg")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 4 | mouseOut | css=.btn__close > svg | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 5 | click | css=.btn__close > svg | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn__close > svg").click()
    # 6 | runScript | window.scrollTo(0,2422) | 
    self.driver.execute_script("window.scrollTo(0,2422)")
    # 7 | runScript | window.scrollTo(0,726) | 
    self.driver.execute_script("window.scrollTo(0,726)")
    # 8 | selectFrame | index=4 | 
    adverts = self.driver.find_elements(By.CSS_SELECTOR, ".is-custom-content-card-ad")
    frame = adverts[0].find_element(By.CSS_SELECTOR, "iframe")
    self.driver.switch_to.frame(frame)
    # 9 | click | css=.img_ad | 
    self.vars["window_handles"] = self.driver.window_handles
    # 10 | storeWindowHandle | root | 
    self.driver.find_element(By.CSS_SELECTOR, ".img_ad").click()
    # 11 | selectWindow | handle=${win9838} | 
    self.vars["win9838"] = self.wait_for_window(2000)
    # 12 | close |  | 
    self.vars["root"] = self.driver.current_window_handle
    # 13 | selectWindow | handle=${root} | 
    self.driver.switch_to.window(self.vars["win9838"])
    # 14 | selectFrame | index=7 | 
    self.driver.close()
    # 15 | click | css=.img_ad | 
    self.driver.switch_to.window(self.vars["root"])
    # 16 | selectWindow | handle=${win9615} | 
    frame = adverts[1].find_element(By.CSS_SELECTOR, "iframe")
    self.driver.switch_to.frame(frame)
    # 17 | close |  | 
    self.vars["window_handles"] = self.driver.window_handles
    # 18 | selectWindow | handle=${root} | 
    self.driver.find_element(By.CSS_SELECTOR, ".img_ad").click()
    # 19 | selectFrame | index=5 | 
    self.vars["win9615"] = self.wait_for_window(2000)
    # 20 | click | css=.img_ad | 
    self.driver.switch_to.window(self.vars["win9615"])
    # 21 | selectWindow | handle=${win8592} | 
    self.driver.close()
    # 22 | close |  | 
    self.driver.switch_to.window(self.vars["root"])
    # 23 | selectWindow | handle=${root} | 
    self.driver.switch_to.frame(5)
    # 24 | selectFrame | index=10 | 
    self.vars["window_handles"] = self.driver.window_handles
    # 25 | click | css=.img_ad | 
    self.driver.find_element(By.CSS_SELECTOR, ".img_ad").click()
    # 26 | selectWindow | handle=${win8350} | 
    self.vars["win8592"] = self.wait_for_window(2000)
    # 27 | close |  | 
    self.driver.switch_to.window(self.vars["win8592"])
    # 28 | selectWindow | handle=${root} | 
    self.driver.close()
    # 29 | mouseOver | css=a:nth-child(1) > img | 
    self.driver.switch_to.window(self.vars["root"])
    # 30 | runScript | window.scrollTo(0,2973) | 
    self.driver.switch_to.frame(10)
    # 31 | click | css=a:nth-child(1) > img | 
    self.vars["window_handles"] = self.driver.window_handles
    # 32 | mouseOut | css=a:nth-child(1) > img | 
    self.driver.find_element(By.CSS_SELECTOR, ".img_ad").click()
    # 33 | selectWindow | handle=${win6751} | 
    self.vars["win8350"] = self.wait_for_window(2000)
    # 34 | close |  | 
    self.driver.switch_to.window(self.vars["win8350"])
    # 35 | selectWindow | handle=${root} | 
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    element = self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(1) > img")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.execute_script("window.scrollTo(0,2973)")
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(1) > img").click()
    self.vars["win6751"] = self.wait_for_window(2000)
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.driver.switch_to.window(self.vars["win6751"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
  

test_anuncios_2 = TestAnuncios()
test_anuncios_2.setup_method()
test_anuncios_2.test_anuncios()
test_anuncios_2.teardown_method()